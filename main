import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, mean_absolute_error
import math
# Load the data
data = pd.read_csv('traffic.csv')
data['DateTime'] = pd.to_datetime(data['DateTime'])
data = data.set_index('DateTime')

# Resample data to daily frequency, aggregating by sum
data = data.resample('D').sum()

# Scale the data
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Split the data into train and test sets
train_data = scaled_data[:int(len(scaled_data) * 0.8)]
test_data = scaled_data[int(len(scaled_data) * 0.8):]


# Prepare the data for LSTM
def create_dataset(data, step):
    X, Y = [], []
    for i in range(len(data) - step - 1):
        X.append(data[i:(i + step), 0])
        Y.append(data[i + step, 0])
    return np.array(X), np.array(Y)


step = 20
X_train, y_train = create_dataset(train_data, step)
X_test, y_test = create_dataset(test_data, step)
print(X_train)
# Reshape input to be [samples, time steps, features] which is required for LSTM
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))
X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

# Define parameters to test
epochs = [100]
batch_sizes = [1]
losses = ['mean_absolute_error']

for epoch in epochs:
    for batch_size in batch_sizes:
        for loss in losses:
            # Create the LSTM model
            model = Sequential()
            model.add(LSTM(100, return_sequences=True, input_shape=(X_train.shape[1], 1)))
            model.add(LSTM(50, return_sequences=True))
            model.add(LSTM(25, return_sequences=False))
            model.add(Dense(1))

            # Compile and fit the model
            model.compile(optimizer='adam', loss=loss)
            history = model.fit(X_train, y_train, batch_size=batch_size, epochs=epoch, validation_data=(X_test, y_test))

            # Plot the loss during training
            plt.figure(figsize=(14, 6))
            plt.plot(history.history['loss'])
            plt.plot(history.history['val_loss'])
            plt.title('Model loss for epoch = ' + str(epoch) + ', batch_size = ' + str(batch_size) + ', loss = ' + loss)
            plt.ylabel('Loss')
            plt.xlabel('Epoch')
            plt.legend(['Train', 'Test'], loc='upper right')
            plt.show()

            # Make predictions on the test data
            predictions = model.predict(X_test)
            predictions = scaler.inverse_transform(predictions)

            # Plot the predicted vs. actual values
            plt.figure(figsize=(14, 6))
            plt.plot(predictions, color='r')
            plt.plot(scaler.inverse_transform(y_test.reshape(-1, 1)), alpha=0.5)
            plt.title('Predicted vs. actual values for epoch = ' + str(epoch) + ', batch_size = ' + str(
                batch_size) + ', loss = ' + loss)
            plt.xlabel('DateTime')
            plt.show()

            test_loss = model.evaluate(X_test, y_test, verbose=0)
            print(f'Test loss (mean squared error): {test_loss}')
            y_test_pred = model.predict(X_test)
            print(f'Test root mean squared error: {math.sqrt(mean_squared_error(y_test, y_test_pred))}')
            print(f'Test mean absolute error: {mean_absolute_error(y_test, y_test_pred)}')

            # Predict the next 60 days of sales
            forecast_period = 31
            input_data = scaled_data[-step:]  # get the last 'step' days of the data
            input_data = input_data.reshape((1, step, 1))  # reshape to fit the model input shape

            forecast = []
            for _ in range(forecast_period):
                prediction = model.predict(input_data)
                forecast.append(prediction[0, 0])

                # Use the prediction to update the input data, discarding the oldest value
                input_data = np.roll(input_data, -1)
                input_data[0, -1, 0] = prediction

            # Inverse transform the forecast data
            forecast = scaler.inverse_transform(np.array(forecast).reshape(-1, 1))
            date  = pd.date_range("2021-08-01", "2021-08-31")
            print(date)
            # Plot the forecast
            plt.figure(figsize=(14, 6))
            plt.plot(date, forecast, color='r')
            plt.title('Forecasted traffic for the next 60 days')
            plt.xlabel('Day')
            plt.ylabel('Traffic')
            plt.legend(['Forecast'], loc='upper right')
            plt.show()
